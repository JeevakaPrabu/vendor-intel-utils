From 180fcc380214ededa567f84f18e96a8e27b53ef3 Mon Sep 17 00:00:00 2001
From: Jeevaka Prabu Badrappan <jeevaka.badrappan@intel.com>
Date: Tue, 11 Dec 2018 14:37:59 +0530
Subject: [PATCH 5/5] Changes to make treble complaint

Change-Id: I0b0efbb53b6e4857b03c3bb21f74845242f11c12
Tracked-On:
Signed-off-by: Jeevaka Prabu Badrappan <jeevaka.badrappan@intel.com>
---
 vendor_libs/Android.mk         |  3 +-
 vendor_libs/bt_vendor_linux.cc | 85 +++++++++++++++++-----------------
 2 files changed, 44 insertions(+), 44 deletions(-)

diff --git a/vendor_libs/Android.mk b/vendor_libs/Android.mk
index 6df182e09..bb9d0d095 100644
--- a/vendor_libs/Android.mk
+++ b/vendor_libs/Android.mk
@@ -34,9 +34,10 @@ LOCAL_SHARED_LIBRARIES := \
         liblog \
         libcutils
 
-LOCAL_STATIC_LIBRARIES := libosi
+LOCAL_HEADER_LIBRARIES += libutils_headers
 
 LOCAL_MODULE := libbt-vendor
+LOCAL_PROPRIETARY_MODULE := true
 LOCAL_MODULE_TAGS := optional
 
 LOCAL_CFLAGS += $(test-vendor_CFLAGS)
diff --git a/vendor_libs/bt_vendor_linux.cc b/vendor_libs/bt_vendor_linux.cc
index 31f6352e1..8ec2ccdb6 100644
--- a/vendor_libs/bt_vendor_linux.cc
+++ b/vendor_libs/bt_vendor_linux.cc
@@ -26,15 +26,14 @@
 #include <stdint.h>
 #include <stdlib.h>
 #include <string.h>
+#include <unistd.h>
 
 #include <sys/ioctl.h>
 #include <sys/socket.h>
 
 #include "hci/include/bt_vendor_lib.h"
-#include "osi/include/compat.h"
-#include "osi/include/log.h"
-#include "osi/include/osi.h"
-#include "osi/include/properties.h"
+#include <utils/Log.h>
+#include <cutils/properties.h>
 
 #define BTPROTO_HCI 1
 #define HCI_CHANNEL_USER 1
@@ -90,10 +89,10 @@ static int bt_vendor_init(const bt_vendor_callbacks_t* p_cb,
                           unsigned char* local_bdaddr) {
   char prop_value[PROPERTY_VALUE_MAX];
 
-  LOG_INFO(LOG_TAG, "%s", __func__);
+  ALOGI("%s", __func__);
 
   if (p_cb == NULL) {
-    LOG_ERROR(LOG_TAG, "init failed with no user callbacks!");
+    ALOGE("init failed with no user callbacks!");
     return -1;
   }
 
@@ -101,7 +100,7 @@ static int bt_vendor_init(const bt_vendor_callbacks_t* p_cb,
 
   memcpy(bt_vendor_local_bdaddr, local_bdaddr, sizeof(bt_vendor_local_bdaddr));
 
-  osi_property_get("bluetooth.interface", prop_value, "0");
+  property_get("bluetooth.interface", prop_value, "0");
 
   errno = 0;
   if (memcmp(prop_value, "hci", 3))
@@ -110,16 +109,16 @@ static int bt_vendor_init(const bt_vendor_callbacks_t* p_cb,
     hci_interface = strtol(prop_value + 3, NULL, 10);
   if (errno) hci_interface = 0;
 
-  LOG_INFO(LOG_TAG, "Using interface hci%d", hci_interface);
+  ALOGI("Using interface hci%d", hci_interface);
 
-  osi_property_get("bluetooth.rfkill", prop_value, "0");
+  property_get("bluetooth.rfkill", prop_value, "0");
 
   rfkill_en = atoi(prop_value);
-  if (rfkill_en) LOG_INFO(LOG_TAG, "RFKILL enabled");
+  if (rfkill_en) ALOGI("RFKILL enabled");
 
   bt_hwcfg_en =
-      osi_property_get("bluetooth.hwcfg", prop_value, NULL) > 0 ? 1 : 0;
-  if (bt_hwcfg_en) LOG_INFO(LOG_TAG, "HWCFG enabled");
+      property_get("vendor.bluetooth.hwcfg", prop_value, NULL) > 0 ? 1 : 0;
+  if (bt_hwcfg_en) ALOGI("HWCFG enabled");
 
   return 0;
 }
@@ -128,13 +127,13 @@ static int bt_vendor_hw_cfg(int stop) {
   if (!bt_hwcfg_en) return 0;
 
   if (stop) {
-    if (osi_property_set("bluetooth.hwcfg", "stop") < 0) {
-      LOG_ERROR(LOG_TAG, "%s cannot stop btcfg service via prop", __func__);
+    if (property_set("vendor.bluetooth.hwcfg", "stop") < 0) {
+      ALOGE("%s cannot stop btcfg service via prop", __func__);
       return 1;
     }
   } else {
-    if (osi_property_set("bluetooth.hwcfg", "start") < 0) {
-      LOG_ERROR(LOG_TAG, "%s cannot start btcfg service via prop", __func__);
+    if (property_set("vendor.bluetooth.hwcfg", "start") < 0) {
+      ALOGE("%s cannot start btcfg service via prop", __func__);
       return 1;
     }
   }
@@ -148,11 +147,11 @@ static int bt_vendor_wait_hcidev(void) {
   int fd;
   int ret = 0;
 
-  LOG_INFO(LOG_TAG, "%s", __func__);
+  ALOGI("%s", __func__);
 
   fd = socket(PF_BLUETOOTH, SOCK_RAW, BTPROTO_HCI);
   if (fd < 0) {
-    LOG_ERROR(LOG_TAG, "Bluetooth socket error: %s", strerror(errno));
+    ALOGE("Bluetooth socket error: %s", strerror(errno));
     return -1;
   }
 
@@ -162,7 +161,7 @@ static int bt_vendor_wait_hcidev(void) {
   addr.hci_channel = HCI_CHANNEL_CONTROL;
 
   if (bind(fd, (struct sockaddr*)&addr, sizeof(addr)) < 0) {
-    LOG_ERROR(LOG_TAG, "HCI Channel Control: %s", strerror(errno));
+    ALOGE("HCI Channel Control: %s", strerror(errno));
     close(fd);
     return -1;
   }
@@ -176,30 +175,30 @@ static int bt_vendor_wait_hcidev(void) {
   ev.len = 0;
 
   ssize_t wrote;
-  OSI_NO_INTR(wrote = write(fd, &ev, 6));
+  wrote = write(fd, &ev, 6);
   if (wrote != 6) {
-    LOG_ERROR(LOG_TAG, "Unable to write mgmt command: %s", strerror(errno));
+    ALOGE("Unable to write mgmt command: %s", strerror(errno));
     ret = -1;
     goto end;
   }
 
   while (1) {
     int n;
-    OSI_NO_INTR(n = poll(fds, 1, MGMT_EV_POLL_TIMEOUT));
+    n = poll(fds, 1, MGMT_EV_POLL_TIMEOUT);
     if (n == -1) {
-      LOG_ERROR(LOG_TAG, "Poll error: %s", strerror(errno));
+      ALOGE("Poll error: %s", strerror(errno));
       ret = -1;
       break;
     } else if (n == 0) {
-      LOG_ERROR(LOG_TAG, "Timeout, no HCI device detected");
+      ALOGE("Timeout, no HCI device detected");
       ret = -1;
       break;
     }
 
     if (fds[0].revents & POLLIN) {
-      OSI_NO_INTR(n = read(fd, &ev, sizeof(struct mgmt_pkt)));
+      n = read(fd, &ev, sizeof(struct mgmt_pkt));
       if (n < 0) {
-        LOG_ERROR(LOG_TAG, "Error reading control channel: %s",
+        ALOGE("Error reading control channel: %s",
                   strerror(errno));
         ret = -1;
         break;
@@ -231,11 +230,11 @@ static int bt_vendor_open(void* param) {
   int(*fd_array)[] = (int(*)[])param;
   int fd;
 
-  LOG_INFO(LOG_TAG, "%s", __func__);
+  ALOGI("%s", __func__);
 
   fd = socket(AF_BLUETOOTH, SOCK_RAW, BTPROTO_HCI);
   if (fd < 0) {
-    LOG_ERROR(LOG_TAG, "socket create error %s", strerror(errno));
+    ALOGE("socket create error %s", strerror(errno));
     return -1;
   }
 
@@ -246,7 +245,7 @@ static int bt_vendor_open(void* param) {
 
   bt_vendor_fd = fd;
 
-  LOG_INFO(LOG_TAG, "%s returning %d", __func__, bt_vendor_fd);
+  ALOGI("%s returning %d", __func__, bt_vendor_fd);
 
   return 1;
 }
@@ -254,7 +253,7 @@ static int bt_vendor_open(void* param) {
 static int bt_vendor_close(void* param) {
   (void)(param);
 
-  LOG_INFO(LOG_TAG, "%s", __func__);
+  ALOGI("%s", __func__);
 
   if (bt_vendor_fd != -1) {
     close(bt_vendor_fd);
@@ -268,11 +267,11 @@ static int bt_vendor_rfkill(int block) {
   struct rfkill_event event;
   int fd;
 
-  LOG_INFO(LOG_TAG, "%s", __func__);
+  ALOGI("%s", __func__);
 
   fd = open("/dev/rfkill", O_WRONLY);
   if (fd < 0) {
-    LOG_ERROR(LOG_TAG, "Unable to open /dev/rfkill");
+    ALOGE("Unable to open /dev/rfkill");
     return -1;
   }
 
@@ -283,9 +282,9 @@ static int bt_vendor_rfkill(int block) {
   event.soft = block;
 
   ssize_t len;
-  OSI_NO_INTR(len = write(fd, &event, sizeof(event)));
+  len = write(fd, &event, sizeof(event));
   if (len < 0) {
-    LOG_ERROR(LOG_TAG, "Failed to change rfkill state");
+    ALOGE("Failed to change rfkill state");
     close(fd);
     return 1;
   }
@@ -299,10 +298,10 @@ static void bt_vendor_fw_cfg(void) {
   struct sockaddr_hci addr;
   int fd = bt_vendor_fd;
 
-  LOG_INFO(LOG_TAG, "%s", __func__);
+  ALOGI("%s", __func__);
 
   if (fd == -1) {
-    LOG_ERROR(LOG_TAG, "bt_vendor_fd: %s", strerror(EBADF));
+    ALOGE("bt_vendor_fd: %s", strerror(EBADF));
     goto failure;
   }
 
@@ -312,30 +311,30 @@ static void bt_vendor_fw_cfg(void) {
   addr.hci_channel = HCI_CHANNEL_USER;
 
   if (bt_vendor_wait_hcidev()) {
-    LOG_ERROR(LOG_TAG, "HCI interface (%d) not found", hci_interface);
+    ALOGE("HCI interface (%d) not found", hci_interface);
     goto failure;
   }
 
   if (bind(fd, (struct sockaddr*)&addr, sizeof(addr)) < 0) {
-    LOG_ERROR(LOG_TAG, "socket bind error %s", strerror(errno));
+    ALOGE("socket bind error %s", strerror(errno));
     goto failure;
   }
 
-  LOG_INFO(LOG_TAG, "HCI device ready");
+  ALOGI("HCI device ready");
 
   bt_vendor_callbacks->fwcfg_cb(BT_VND_OP_RESULT_SUCCESS);
 
   return;
 
 failure:
-  LOG_ERROR(LOG_TAG, "Hardware Config Error");
+  ALOGE("Hardware Config Error");
   bt_vendor_callbacks->fwcfg_cb(BT_VND_OP_RESULT_FAIL);
 }
 
 static int bt_vendor_op(bt_vendor_opcode_t opcode, void* param) {
   int retval = 0;
 
-  LOG_INFO(LOG_TAG, "%s op %d", __func__, opcode);
+  ALOGI("%s op %d", __func__, opcode);
 
   switch (opcode) {
     case BT_VND_OP_POWER_CTRL:
@@ -394,13 +393,13 @@ static int bt_vendor_op(bt_vendor_opcode_t opcode, void* param) {
       break;
   }
 
-  LOG_INFO(LOG_TAG, "%s op %d retval %d", __func__, opcode, retval);
+  ALOGI("%s op %d retval %d", __func__, opcode, retval);
 
   return retval;
 }
 
 static void bt_vendor_cleanup(void) {
-  LOG_INFO(LOG_TAG, "%s", __func__);
+  ALOGI("%s", __func__);
 
   bt_vendor_callbacks = NULL;
 }
-- 
2.17.1

