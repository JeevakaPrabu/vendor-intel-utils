From 984bf93e2aa2bb93966d331fc2d832ffd0914703 Mon Sep 17 00:00:00 2001
From: Jeevaka Prabu Badrappan <jeevaka.badrappan@intel.com>
Date: Fri, 15 Jul 2022 22:02:24 +0530
Subject: [PATCH] Enable compilation on android

- resolved compilation error
- added Android.mk

Change-Id: I134da07ce6ad4c9d281e313f7ea68d45ef8b1d70
Tracked-On: OAM-111192
Signed-off-by: Jeevaka Prabu Badrappan <jeevaka.badrappan@intel.com>
Signed-off-by: Yerriswamy <yerriswamy.kt@intel.com>
Signed-off-by: Ratnesh Kumar Rai <ratnesh.kumar.rai@intel.com>
---
 Android.mk                                    | 179 ++++++++++++++++++
 .../Utility/CpuSwizzleBlt/CpuSwizzleBlt.c     |   1 -
 Source/GmmLib/inc/External/Common/GmmInfo.h   |   4 +-
 3 files changed, 181 insertions(+), 3 deletions(-)
 create mode 100644 Android.mk

diff --git a/Android.mk b/Android.mk
new file mode 100644
index 0000000..d75f521
--- /dev/null
+++ b/Android.mk
@@ -0,0 +1,179 @@
+# Copyright(c) 2018 Intel Corporation
+
+# Permission is hereby granted, free of charge, to any person obtaining a
+# copy of this software and associated documentation files(the "Software"),
+# to deal in the Software without restriction, including without limitation
+# the rights to use, copy, modify, merge, publish, distribute, sublicense,
+# and / or sell copies of the Software, and to permit persons to whom the
+# Software is furnished to do so, subject to the following conditions:
+
+# The above copyright notice and this permission notice shall be included
+# in all copies or substantial portions of the Software.
+
+# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
+# OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
+# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
+# THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR
+# OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
+# ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
+# OTHER DEALINGS IN THE SOFTWARE.
+
+LOCAL_PATH:= $(call my-dir)
+include $(CLEAR_VARS)
+
+LOCAL_MODULE := libigdgmm
+LOCAL_PROPRIETARY_MODULE := true
+LOCAL_SRC_FILES = \
+    Source/Common/AssertTracer/AssertTracer.cpp \
+    Source/GmmLib/CachePolicy/GmmCachePolicy.cpp \
+    Source/GmmLib/CachePolicy/GmmCachePolicyCommon.cpp \
+    Source/GmmLib/CachePolicy/GmmGen8CachePolicy.cpp \
+    Source/GmmLib/CachePolicy/GmmGen9CachePolicy.cpp \
+    Source/GmmLib/CachePolicy/GmmGen10CachePolicy.cpp \
+    Source/GmmLib/CachePolicy/GmmGen11CachePolicy.cpp \
+    Source/GmmLib/CachePolicy/GmmGen12CachePolicy.cpp \
+    Source/GmmLib/CachePolicy/GmmXe_LPGCachePolicy.cpp \
+    Source/GmmLib/CachePolicy/GmmGen12dGPUCachePolicy.cpp \
+    Source/GmmLib/Platform/GmmGen11Platform.cpp \
+    Source/GmmLib/Platform/GmmGen12Platform.cpp \
+    Source/GmmLib/Platform/GmmGen8Platform.cpp \
+    Source/GmmLib/Platform/GmmGen9Platform.cpp \
+    Source/GmmLib/Platform/GmmGen10Platform.cpp \
+    Source/GmmLib/Platform/GmmPlatform.cpp \
+    Source/GmmLib/Resource/GmmResourceInfo.cpp \
+    Source/GmmLib/Resource/GmmResourceInfoCommon.cpp \
+    Source/GmmLib/Resource/GmmResourceInfoCommonEx.cpp \
+    Source/GmmLib/Resource/GmmRestrictions.cpp \
+    Source/GmmLib/Resource/Linux/GmmResourceInfoLinCWrapper.cpp \
+    Source/GmmLib/Texture/GmmGen7Texture.cpp \
+    Source/GmmLib/Texture/GmmGen8Texture.cpp \
+    Source/GmmLib/Texture/GmmGen9Texture.cpp \
+    Source/GmmLib/Texture/GmmGen10Texture.cpp \
+    Source/GmmLib/Texture/GmmGen11Texture.cpp \
+    Source/GmmLib/Texture/GmmGen12Texture.cpp \
+    Source/GmmLib/Texture/GmmXe_LPGTexture.cpp \
+    Source/GmmLib/Texture/GmmTexture.cpp \
+    Source/GmmLib/Texture/GmmTextureAlloc.cpp \
+    Source/GmmLib/Texture/GmmTextureSpecialCases.cpp \
+    Source/GmmLib/Texture/GmmTextureOffset.cpp \
+    Source/GmmLib/GlobalInfo/GmmInfo.cpp \
+    Source/GmmLib/Utility/CpuSwizzleBlt/CpuSwizzleBlt.c \
+    Source/GmmLib/Utility/GmmLog/GmmLog.cpp \
+    Source/GmmLib/Utility/GmmUtility.cpp \
+    Source/GmmLib/TranslationTable/GmmAuxTable.cpp \
+    Source/GmmLib/TranslationTable/GmmPageTableMgr.cpp \
+    Source/GmmLib/TranslationTable/GmmUmdTranslationTable.cpp \
+    Source/GmmLib/GlobalInfo/GmmClientContext.cpp \
+    Source/GmmLib/GlobalInfo/GmmLibDllMain.cpp \
+
+LOCAL_CFLAGS := \
+    -Wno-logical-op-parentheses \
+    -Wno-error \
+    -Wno-unused-parameter \
+    -msse2 \
+    -msse3 \
+    -mssse3 \
+    -msse4.1 \
+    -msse4.2 \
+    -DGMM_LIB_DLL \
+    -DGMM_LIB_DLL_EXPORTS \
+    -DGMM_UNIFIED_LIB \
+    -DGMM_UNIFY_DAF_API \
+    -DISTDLIB_UMD \
+    -DSMALL_POOL_ALLOC \
+    -DUNUSED_ISTDLIB_MT \
+    -D_ATL_NO_WIN_SUPPORT \
+    -D_X64 \
+    -D__GFX_MACRO_C__ \
+    -D__GMM \
+    -D__STDC_CONSTANT_MACROS \
+    -D__STDC_LIMIT_MACROS \
+    -D__UMD \
+    -Wno-implicit-fallthrough \
+    -Wno-missing-braces \
+    -Wno-parentheses-equality \
+    -Wno-logical-not-parentheses \
+    -Wno-missing-field-initializers \
+    -Digfx_gmmumd_dll_EXPORTS \
+    -O3 \
+    -DNDEBUG \
+    -fPIC \
+    -Wall \
+    -Winit-self \
+    -Winvalid-pch \
+    -Wpointer-arith \
+    -Wno-unused \
+    -Wno-unknown-pragmas \
+    -Wno-comments \
+    -Wno-narrowing \
+    -Wno-overflow \
+    -Wno-parentheses \
+    -Wno-missing-braces \
+    -Wno-sign-compare \
+    -Wno-enum-compare \
+    -Werror=address \
+    -Werror=format-security \
+    -Werror=return-type \
+    -march=core-avx2 \
+    -mpopcnt \
+    -mfpmath=sse \
+    -finline-functions \
+    -fno-short-enums \
+    -Wa,--noexecstack \
+    -fno-strict-aliasing \
+    -DUSE_MMX \
+    -DUSE_SSE \
+    -DUSE_SSE2 \
+    -DUSE_SSE3 \
+    -DUSE_SSSE3 \
+    -fstack-protector \
+    -fdata-sections \
+    -ffunction-sections \
+    -fmessage-length=0 \
+    -fvisibility=hidden \
+    -fPIC \
+    -g \
+    -funswitch-loops \
+    -Wl,--no-undefined \
+    -Wl,--no-as-needed \
+    -Wl,--gc-sections \
+    -O2 \
+    -fno-omit-frame-pointer \
+    -pthread \
+    -Wno-pragma-pack \
+
+LOCAL_CPPFLAGS := $(LOCAL_CFLAGS) \
+    -Wno-reorder \
+    -Wsign-promo \
+    -Wnon-virtual-dtor \
+    -Wno-invalid-offsetof \
+    -fvisibility-inlines-hidden \
+    -fno-use-cxa-atexit \
+    -fno-rtti \
+    -fexceptions \
+    -fcheck-new \
+    -std=c++11 \
+    -pthread \
+    -Werror=non-virtual-dtor \
+
+LOCAL_C_INCLUDES = \
+    $(LOCAL_PATH)/Source/GmmLib \
+    $(LOCAL_PATH)/Source/GmmLib/Utility/GmmLog \
+    $(LOCAL_PATH)/Source/GmmLib/inc \
+    $(LOCAL_PATH)/Source/GmmLib/Utility \
+    $(LOCAL_PATH)/Source/GmmLib/GlobalInfo \
+    $(LOCAL_PATH)/Source/GmmLib/Texture \
+    $(LOCAL_PATH)/Source/GmmLib/Resource \
+    $(LOCAL_PATH)/Source/GmmLib/Platform \
+    $(LOCAL_PATH)/Source/util \
+    $(LOCAL_PATH)/Source/inc \
+    $(LOCAL_PATH)/Source/inc/common \
+    $(LOCAL_PATH)/Source/inc/umKmInc \
+    $(LOCAL_PATH)/Source/install
+
+LOCAL_EXPORT_C_INCLUDE_DIRS = \
+    $(LOCAL_PATH)/Source/GmmLib/inc \
+    $(LOCAL_PATH)/Source/inc \
+    $(LOCAL_PATH)/Source/inc/common \
+
+include $(BUILD_SHARED_LIBRARY)
diff --git a/Source/GmmLib/Utility/CpuSwizzleBlt/CpuSwizzleBlt.c b/Source/GmmLib/Utility/CpuSwizzleBlt/CpuSwizzleBlt.c
index cd87809..b5b6e71 100644
--- a/Source/GmmLib/Utility/CpuSwizzleBlt/CpuSwizzleBlt.c
+++ b/Source/GmmLib/Utility/CpuSwizzleBlt/CpuSwizzleBlt.c
@@ -331,7 +331,6 @@ extern void CpuSwizzleBlt(CPU_SWIZZLE_BLT_SURFACE *pDest, CPU_SWIZZLE_BLT_SURFAC
     #error "Unexpected compiler!"
 #endif
 
-
 // POPCNT: Count Lit Bits...                 0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15
 static unsigned char PopCnt4[16] =          {0, 1, 1, 2, 1, 2, 2, 3, 1, 2, 2, 3, 2, 3, 3, 4};
 #define POPCNT4(x)  (PopCnt4[(x) & 0xf])
diff --git a/Source/GmmLib/inc/External/Common/GmmInfo.h b/Source/GmmLib/inc/External/Common/GmmInfo.h
index da44aae..95e3aa9 100644
--- a/Source/GmmLib/inc/External/Common/GmmInfo.h
+++ b/Source/GmmLib/inc/External/Common/GmmInfo.h
@@ -627,8 +627,8 @@ typedef struct _GMM_ADAPTER_INFO_
         GMM_ADAPTER_INFO *              GetAdapterNode(ADAPTER_BDF sBdf);   // Replacement for GetAdapterIndex, now get adapter node from the linked list
 
         // Mutexes which protect the below thread unsafe functions
-        GMM_STATUS                      LockMAContextSyncMutex();
-        GMM_STATUS                      UnLockMAContextSyncMutex();
+        GMM_STATUS GMM_STDCALL          LockMAContextSyncMutex();
+        GMM_STATUS GMM_STDCALL          UnLockMAContextSyncMutex();
 
         // thread unsafe functions; these must be protected with LockMAContextSyncMutex
         GMM_ADAPTER_INFO *              GetAdapterNodeUnlocked(ADAPTER_BDF sBdf);
-- 
2.40.0

